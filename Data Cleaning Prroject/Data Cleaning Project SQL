--Data Cleaning

SELECT *
FROM layoffs;

-- 1. remove Duplicates
-- 2. Standardize the Data
-- 3. Null Values or blank values
-- 4. Remove Any Columns and rows



--1. Removing Duplicates
CREATE TABLE layoffs_staging --(want to make duplicate table to keep original dataset)
LIKE layoffs;


SELECT *
FROM layoffs_staging

INSERT layoffs_staging
SELECT *
FROM layoffs;


SELECT *
ROW_NUMBER() OVER() --to create a new column and check for duplicate rows
PARTITION BY company, industry, total_laid_off, percentage_laid_off, 'date') as row_num 
FROM layoffs_staging;

WITH duplicate_cte AS
(
SELECT *
ROW_NUMBER() OVER(
PARTITION BY company, location,
 industry, total_laid_off, percentage_laid_off, 'date', stage, 
 country, funds_raised_millions) as row_num 
FROM layoffs_staging;
)
SELECT *
FROM duplicate_cte
WHERE row_num > 1; --shows duplicate rows


SELECT *
FROM layoffs_staging
WHERE  company = 'Casper'; --There is a duplicate, how do we remove?


WITH duplicate_cte AS
(
SELECT *
ROW_NUMBER() OVER(
PARTITION BY company, location,
 industry, total_laid_off, percentage_laid_off, 'date', stage, 
 country, funds_raised_millions) as row_num 
FROM layoffs_staging;
)
DELETE --delete command is not updateable in My SQL
FROM duplicate_cte
WHERE row_num > 1; 


--may come out as error if in MySQL, and can write like this (with layoff_staging2 table):
CREATE TABLE  `layoffs_staging2` (
`company` text,
`location`text,
`industry`text,
`total_laid_off` INT,
`percentage_laid_off` text,
`date` text,
`stage`text,
`country` text,
`funds_raised_millions` int,
row_num INT
) ENGINE =InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

SELECT *
FROM layoffs_staging2;
where ROW_NUM > 1;

INSERT INTO
SELECT*,
ROW_NUMBER() OVER(
PARTITION BY company, location,
 industry, total_laid_off, percentage_laid_off, 'date', stage, 
 country, funds_raised_millions) as row_num 
FROM layoffs_staging



DELETE
FROM layoffs_staging2;
where ROW_NUM > 1;

SELECT *
FROM layoffs_staging2;


-- 2. Standardizing Data

SELECT company, TRIM(company)
FROM layoffs_staging2

UPDATE layoffs_staging2
SET company = TRIM(company);


SELECT DISTINCT industry
FROM layoffs_staging2
;

UPDATE layoffs_staging2
SET industry = 'Crypto'
WHERE industry LIKE '';


SELECT DISTINCT country, TRIM(TRAILING '.' FROM country) --small trick to root out period from data set
FROM layoffs_staging2
ORDER BY 1;

UPDATE layoffs_staging2
SET country = TRIM(TRAILING '.' FROM country)
WHERE country LIKE 'United States%';

SELECT 'date'
FROM layoffs_staging2


UPDATE layoffs_staging2
SET 'date' = STR_TO_DATE('date', '%m/%d/%Y')

ALTER TABLE layoffs_staging2
MODIFY COLUMN 'date' DATE;

--3. LOOK AT NULL VALUES
SELECT *
FROM layoffs_staging2;
WHERE tota_laid_off IS NULL;
AND percentage_laid_off IS NULL;

UPDATE layoff_staging2
SET industry = NULL
WHERE (t1.industry IS NULL or t1.industry = '')
AND t2.industry IS NOT NULL;

SELECT DISTINCT industry
FROM layoffs_staging2;
WHERE industry IS NULL 
OR industry = '';

SELECT *
FROM layoffs_staging2;
WHERE company like  'Balley%';

SELECT *
FROM layoffs_staging2 t1
join layoffs_staging2 t2
    ON t1.company = t2.company
WHERE (t1.industry IS NULL or t1.industry = '')
AND t2.industry IS NOT NULL

UPDATE layoffs_staging2 t1
JOIN layoffs_staging2 t2
    ON t1.company = t2.company
SET t1.industry = t2.industry
WHERE t1.industry IS NULL
AND t2.industry IS NOT NULL;

SELECT *
FROM layoffs_staging2


-- 4. Remove Any Columns and rows
SELECT *
FROM layoffs_staging2;
WHERE tota_laid_off IS NULL;
AND percentage_laid_off IS NULL;


DELETE
FROM layoffs_staging2;
WHERE tota_laid_off IS NULL;
AND percentage_laid_off IS NULL;

SELECT *
FROM layoffs_staging2;

ALTER TABLE layoff_staging2
DROP COLUMN row_num;









